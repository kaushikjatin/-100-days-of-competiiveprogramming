class Node {
    int data;
    Node left, right;
    
    public Node(int data){
        this.data = data;
    }
}
*/

class GFG 
{
    
    class queue_node
    {
        Node node;
        int min=Integer.MIN_VALUE;
        int max=Integer.MAX_VALUE;
        
        queue_node(Node a,int b,int c)
        {
            node=a;
            min=b;
            max=c;
        }
    }

    public Node constructBST(int[] arr)
    {
        Queue<queue_node> queue=new LinkedList<queue_node>();
        int n=arr.length;
        Node root=new Node(arr[0]);
        queue_node current=new queue_node(root,Integer.MIN_VALUE,Integer.MAX_VALUE);
        queue.add(current);
        int i=1;
        while(i<n)
        {
             current=queue.poll();
            
            if(arr[i]>=current.min && arr[i]<current.node.data)
            {
               // System.out.print("came here");
                Node temp1=new Node(arr[i]);
                queue_node temp=new queue_node(temp1,current.min,current.node.data-1);
                current.node.left=temp1;
                queue.add(temp);
                i+=1;
            }
            if(i<n && arr[i]>current.node.data && arr[i]<=current.max)
            {
                Node temp1=new Node(arr[i]);
                queue_node temp=new queue_node(temp1,current.node.data+1,current.max);
                current.node.right=temp1;
                queue.add(temp);
                i+=1;
            }
        }
        
        return root;
    }
}
